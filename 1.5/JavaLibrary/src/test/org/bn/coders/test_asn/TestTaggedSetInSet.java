
package test.org.bn.coders.test_asn;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "TestTaggedSetInSet" )
    public class TestTaggedSetInSet implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "TestTaggedSetInSet" , isSet = true )
       public static class TestTaggedSetInSetSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "config1", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Config config1 = null;
                
  
        @ASN1Element ( name = "config2", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Config2 config2 = null;
                
  
        
        public Config getConfig1 () {
            return this.config1;
        }

        

        public void setConfig1 (Config value) {
            this.config1 = value;
        }
        
  
        
        public Config2 getConfig2 () {
            return this.config2;
        }

        

        public void setConfig2 (Config2 value) {
            this.config2 = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TestTaggedSetInSetSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TestTaggedSetInSetSequenceType = CoderFactory.getInstance().newPreparedElementData(TestTaggedSetInSetSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "TestTaggedSetInSet", isOptional =  false , hasTag =  true, tag = 77, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private TestTaggedSetInSetSequenceType  value;        

        
        
        public TestTaggedSetInSet () {
        }
        
        
        
        public void setValue(TestTaggedSetInSetSequenceType value) {
            this.value = value;
        }
        
        
        
        public TestTaggedSetInSetSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(TestTaggedSetInSet.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            