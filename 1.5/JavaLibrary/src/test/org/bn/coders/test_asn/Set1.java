
package test.org.bn.coders.test_asn;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "Set1" )
    public class Set1 implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "Set1" , isSet = true )
       public static class Set1SequenceType implements IASN1PreparedElement {
                @ASN1Integer( name = "" )
    
        @ASN1Element ( name = "set1ID", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Long set1ID = null;
                
  
        
        public Long getSet1ID () {
            return this.set1ID;
        }

        

        public void setSet1ID (Long value) {
            this.set1ID = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Set1SequenceType;
        }

       private static IASN1PreparedElementData preparedData_Set1SequenceType = CoderFactory.getInstance().newPreparedElementData(Set1SequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "Set1", isOptional =  false , hasTag =  true, tag = 55, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private Set1SequenceType  value;        

        
        
        public Set1 () {
        }
        
        
        
        public void setValue(Set1SequenceType value) {
            this.value = value;
        }
        
        
        
        public Set1SequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Set1.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            