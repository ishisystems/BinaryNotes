
package test.org.bn.coders.test_asn;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "TestTaggedSet" )
    public class TestTaggedSet implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "TestTaggedSet" , isSet = true )
       public static class TestTaggedSetSequenceType implements IASN1PreparedElement {
                @ASN1Integer( name = "" )
    
        @ASN1Element ( name = "field1", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private Long field1 = null;
                
  @ASN1Integer( name = "" )
    
        @ASN1Element ( name = "field2", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private Long field2 = null;
                
  
        
        public Long getField1 () {
            return this.field1;
        }

        

        public void setField1 (Long value) {
            this.field1 = value;
        }
        
  
        
        public Long getField2 () {
            return this.field2;
        }

        

        public void setField2 (Long value) {
            this.field2 = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TestTaggedSetSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TestTaggedSetSequenceType = CoderFactory.getInstance().newPreparedElementData(TestTaggedSetSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "TestTaggedSet", isOptional =  false , hasTag =  true, tag = 54, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private TestTaggedSetSequenceType  value;        

        
        
        public TestTaggedSet () {
        }
        
        
        
        public void setValue(TestTaggedSetSequenceType value) {
            this.value = value;
        }
        
        
        
        public TestTaggedSetSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(TestTaggedSet.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            