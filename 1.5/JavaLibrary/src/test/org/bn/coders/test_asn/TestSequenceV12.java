
package test.org.bn.coders.test_asn;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "TestSequenceV12", isSet = false )
    public class TestSequenceV12 implements IASN1PreparedElement {
            
    @ASN1String( name = "", 
        stringType =  UniversalTag.PrintableString , isUCS = false )
    
        @ASN1Element ( name = "attrSimple", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private String attrSimple = null;
                
  
    @ASN1String( name = "", 
        stringType =  UniversalTag.PrintableString , isUCS = false )
    @ASN1ValueRangeConstraint ( 
		min = 1L, 
		max = 4L ) 
	   
        @ASN1Element ( name = "attrStr", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private String attrStr = null;
                
  
        @ASN1Element ( name = "attrStr2", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private TestPRN attrStr2 = null;
                
  
    @ASN1String( name = "", 
        stringType =  UniversalTag.PrintableString , isUCS = false )
    
@ASN1SequenceOf( name = "", isSetOf = false ) 

    @ASN1ValueRangeConstraint ( 
		min = 1L, 
		max = 5L ) 
	   
        @ASN1Element ( name = "attrArr", isOptional =  false , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private java.util.Collection<String>  attrArr = null;
                
  @ASN1BitString( name = "" )
    
        @ASN1Element ( name = "attrBitStr", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private BitString attrBitStr = null;
                
  @ASN1BitString( name = "" )
    
        @ASN1Element ( name = "attrBitStrDef", isOptional =  false , hasTag =  true, tag = 4 , hasDefaultValue =  true  )
    
	private BitString attrBitStrDef = null;
                
  @ASN1BitString( name = "" )
    @ASN1ValueRangeConstraint ( 
		min = 1L, 
		max = 36L ) 
	   
        @ASN1Element ( name = "attrBitStrBnd", isOptional =  true , hasTag =  true, tag = 5 , hasDefaultValue =  false  )
    
	private BitString attrBitStrBnd = null;
                
  
        @ASN1Element ( name = "attrBoxBitStr", isOptional =  true , hasTag =  true, tag = 6 , hasDefaultValue =  false  )
    
	private TestBitStrBnd attrBoxBitStr = null;
                
  @ASN1OctetString( name = "" )
    
            @ASN1SizeConstraint ( max = 4L )
        
        @ASN1Element ( name = "attrStrict", isOptional =  false , hasTag =  true, tag = 7 , hasDefaultValue =  false  )
    
	private byte[] attrStrict = null;
                
  
        
        public String getAttrSimple () {
            return this.attrSimple;
        }

        

        public void setAttrSimple (String value) {
            this.attrSimple = value;
        }
        
  
        
        public String getAttrStr () {
            return this.attrStr;
        }

        

        public void setAttrStr (String value) {
            this.attrStr = value;
        }
        
  
        
        public TestPRN getAttrStr2 () {
            return this.attrStr2;
        }

        

        public void setAttrStr2 (TestPRN value) {
            this.attrStr2 = value;
        }
        
  
        
        public java.util.Collection<String>  getAttrArr () {
            return this.attrArr;
        }

        

        public void setAttrArr (java.util.Collection<String>  value) {
            this.attrArr = value;
        }
        
  
        
        public BitString getAttrBitStr () {
            return this.attrBitStr;
        }

        
        public boolean isAttrBitStrPresent () {
            return this.attrBitStr != null;
        }
        

        public void setAttrBitStr (BitString value) {
            this.attrBitStr = value;
        }
        
  
        
        public BitString getAttrBitStrDef () {
            return this.attrBitStrDef;
        }

        

        public void setAttrBitStrDef (BitString value) {
            this.attrBitStrDef = value;
        }
        
  
        
        public BitString getAttrBitStrBnd () {
            return this.attrBitStrBnd;
        }

        
        public boolean isAttrBitStrBndPresent () {
            return this.attrBitStrBnd != null;
        }
        

        public void setAttrBitStrBnd (BitString value) {
            this.attrBitStrBnd = value;
        }
        
  
        
        public TestBitStrBnd getAttrBoxBitStr () {
            return this.attrBoxBitStr;
        }

        
        public boolean isAttrBoxBitStrPresent () {
            return this.attrBoxBitStr != null;
        }
        

        public void setAttrBoxBitStr (TestBitStrBnd value) {
            this.attrBoxBitStr = value;
        }
        
  
        
        public byte[] getAttrStrict () {
            return this.attrStrict;
        }

        

        public void setAttrStrict (byte[] value) {
            this.attrStrict = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            BitString param_AttrBitStrDef =         
            new BitString (org.bn.coders.CoderUtils.defStringToOctetString("'011'B"));
        setAttrBitStrDef(param_AttrBitStrDef);
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(TestSequenceV12.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            